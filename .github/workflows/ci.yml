name: Django CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest


    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      - name: Wait for PostgreSQL
        run: sleep 3

      - name: Run migrations
        env:
          POSTGRES_HOST: localhost  # Важно! В CI используем localhost
          POSTGRES_DB: mydatabase
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
        run: python manage.py migrate

      - name: Run tests
        run: python manage.py test
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' # Только для main ветки

    steps:
      - uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}


      - name: Copy project files to server
        run: |
            rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

      - name: Install dependencies on server
        run: |
                ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
                  cd ${{ secrets.DEPLOY_DIR }}
                  python3 -m venv venv
                  source venv/bin/activate
                  pip install -r app/requirements.txt
                EOF

      - name: Apply migrations on server
        run: |
                ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
                  cd ${{ secrets.DEPLOY_DIR }}
                  source venv/bin/activate
                  python manage.py migrate
                EOF

      - name: Collect static files on server
        run: |
                ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
                  cd ${{ secrets.DEPLOY_DIR }}
                  source venv/bin/activate
                  python manage.py collectstatic --noinput
                EOF

      - name: Restart application
        run: |
                ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
                  sudo systemctl restart myapp.service
                EOF
