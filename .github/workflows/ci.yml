name: Django CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest


    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      - name: Wait for PostgreSQL
        run: sleep 3

      - name: Run migrations
        env:
          POSTGRES_HOST: localhost  # Важно! В CI используем localhost
          POSTGRES_DB: mydatabase
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
        run: python manage.py migrate

      - name: Run tests
        run: python manage.py test
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Install rsync
        run: sudo apt-get install -y rsync

      - name: Copy project files to server
        run: |
          rsync -avz --delete \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'venv' \
            --exclude '__pycache__' \
            --exclude '.env' \
            --no-perms --no-owner --no-group \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

      - name: Setup server environment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            cd ${{ secrets.DEPLOY_DIR }}
          
            # Create venv if not exists
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
          
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r app/requirements.txt
            export POSTGRES_HOST=localhost
            export POSTGRES_DB=mydatabase
            export POSTGRES_USER=myuser
            export POSTGRES_PASSWORD=mypassword
          
            # Django operations
            python manage.py migrate
            python manage.py collectstatic --noinput
          mkdir -p static
          EOF

      - name: Restart application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            sudo systemctl restart myapp.service
            sudo systemctl restart nginx.service
          "
