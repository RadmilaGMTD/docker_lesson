name: Django CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest


    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      - name: Wait for PostgreSQL
        run: sleep 3

      - name: Run migrations
        env:
          POSTGRES_HOST: localhost  # Важно! В CI используем localhost
          POSTGRES_DB: mydatabase
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
        run: python manage.py migrate

      - name: Run tests
        run: python manage.py test
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' # Только для main ветки

    steps:
      - uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add server to known hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Install rsync
        run: sudo apt-get install -y rsync

      - name: Copy files
        run: |
          rsync -avz --delete \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'venv' \
            --exclude '__pycache__' \
            --no-perms --no-owner --no-group \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/var/www/your_project/

      - name: Setup server environment
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            cd ${{ secrets.DEPLOY_PATH }}
            # Убедимся, что python3-venv установлен
            sudo apt-get update && sudo apt-get install -y python3-venv python3-dev libpq-dev
            # Создаём или обновляем venv
            python3 -m venv venv || { echo 'Failed to create venv'; exit 1; }
            # Активируем и устанавливаем зависимости
            . venv/bin/activate &&
            pip install --upgrade pip &&
            pip install -r app/requirements.txt &&
            python manage.py migrate &&
            python manage.py collectstatic --noinput
          "

      - name: Restart service
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            sudo systemctl restart gunicorn.service
            sudo systemctl restart nginx.service
          "